// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusPayment {
  EM_ANDAMENTO
  CONFIRMADO
  CANCELADO
}

enum StatusTicket {
  USADO
  CANCELADO
  EXPIRADO
  ATIVO
}

model User {
  id            String   @id @default(uuid())
  name          String
  password      String
  email         String   @unique
  cpf           String   @unique
  phone         String
  date_of_birth DateTime
  type          String
  created_at    DateTime @default(now())
  update_at     DateTime @updatedAt
  Driver        Driver[]
}

model SessionUsers {
  idUser String @id
  token  String
}

model Driver {
  id         String   @id @default(uuid())
  cnh        String
  idUser     String
  User       User     @relation(fields: [idUser], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  Travel     Travel[]
}

model State {
  id     String @id @default(uuid())
  name   String
  uf     String
  cities City[]
}

model City {
  id          String          @id @default(uuid())
  name        String          @unique
  coordinates String
  routes      RouteOnCities[]
  State       State?          @relation(fields: [stateId], references: [id])
  stateId     String?
  Route       Route?
  SubRoute    SubRoute?
}

model Route {
  id             String           @id @default(uuid())
  SubRoute       SubRoute[]
  name           String
  km             Int
  departure_time DateTime
  arrival_time   DateTime
  Origin         City             @relation(fields: [originId], references: [id])
  originId       String           @unique
  created_at     DateTime         @default(now())
  update_at      DateTime         @updatedAt
  path           RouteOnCities[]
  RouteOnVehicle RouteOnVehicle[]
  Travel         Travel[]
}

model SubRoute {
  id         String          @id @default(uuid())
  route      Route           @relation(fields: [id_route], references: [id])
  id_route   String
  km         Int
  Origin     City            @relation(fields: [originId], references: [id])
  originId   String          @unique
  value      Float
  path       RouteOnCities[]
  created_at DateTime        @default(now())
  update_at  DateTime        @updatedAt
}

model Vehicle {
  id                String           @id @default(uuid())
  amount_of_accents Int
  plate             String
  with_air          Boolean
  RouteOnVehicle    RouteOnVehicle[]
  Travel            Travel[]
}

model Travel {
  id         String    @id @default(uuid())
  idVechicle String
  Vechicle   Vehicle   @relation(fields: [idVechicle], references: [id])
  idDriver   String
  Drivers    Driver    @relation(fields: [driverId], references: [id])
  driverId   String
  Route      Route     @relation(fields: [routeId], references: [id])
  routeId    String
  Payment    Payment[]
}

model RouteOnVehicle {
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId String
  route     Route   @relation(fields: [routeId], references: [id])
  routeId   String

  @@id([routeId, vehicleId])
}

model RouteOnCities {
  City       City      @relation(fields: [cityId], references: [id])
  cityId     String
  Route      Route     @relation(fields: [routeId], references: [id])
  routeId    String
  SubRoute   SubRoute? @relation(fields: [subRouteId], references: [id])
  subRouteId String?

  @@id([cityId, routeId])
}

model Payment {
  id       String        @id @unique
  Travel   Travel        @relation(fields: [travelId], references: [id])
  status   StatusPayment
  Ticket   Ticket[]
  travelId String
}

model Ticket {
  id         String       @id @default(uuid())
  amount     Float
  cpf        String
  name_user  String
  status     StatusTicket
  Payment    Payment?     @relation(fields: [paymentId], references: [id])
  paymentId  String?
  created_at DateTime     @default(now())
  update_at  DateTime     @updatedAt
}
