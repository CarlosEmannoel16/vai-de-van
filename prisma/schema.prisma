// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusPayment {
  EM_ANDAMENTO
  CONFIRMADO
  CANCELADO
}

enum StatusTicket {
  USADO
  CANCELADO
  EXPIRADO
  ATIVO
}

model User {
  id            String    @id @default(uuid())
  name          String
  password      String
  email         String    @unique
  cpf           String    @unique
  phone         String
  date_of_birth DateTime
  type          String
  created_at    DateTime  @default(now())
  update_at     DateTime  @default(now()) @updatedAt
  Driver        Driver[]
  Vehicle       Vehicle[]
}

model SessionUsers {
  idUser String @id
  token  String
}

model Driver {
  id                String   @id @default(uuid())
  cnh               String
  cnhDateOfIssue    DateTime @default(now())
  cnhExpirationDate DateTime @default(now())
  idUser            String   @unique
  User              User     @relation(fields: [idUser], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Travel            Travel[]
  created_at        DateTime @default(now())
  update_at         DateTime @default(now()) @updatedAt
}

model State {
  id         String   @id @default(uuid())
  name       String
  uf         String
  cities     City[]
  created_at DateTime @default(now())
  update_at  DateTime @default(now()) @updatedAt
}

model City {
  id                 String               @id @default(uuid())
  name               String               @unique
  coordinates        String
  State              State?               @relation(fields: [stateId], references: [id])
  stateId            String?
  RoutesDistiny      Route[]              @relation("Destiny")
  RouteOrigin        Route[]              @relation("Origin")
  created_at         DateTime             @default(now())
  update_at          DateTime             @default(now()) @updatedAt
  TripStops          TripStops[]          @relation("CityDestiny")
  PricesBetweenStops PricesBetweenStops[]
}

model Route {
  id         String   @id @default(uuid())
  name       String   @unique
  km         Int
  kmValue    String?
  Origin     City     @relation(fields: [originId], references: [id], name: "Origin")
  originId   String
  destinyId  String
  Destiny    City     @relation(fields: [destinyId], references: [id], "Destiny")
  Travel     Travel[]
  created_at DateTime @default(now())
  update_at  DateTime @default(now()) @updatedAt
}

model PricesBetweenStops {
  id         String    @id @default(uuid())
  idDestiny  String
  price      Float
  tripStopId String
  Payment    Payment[]
  Ticket     Ticket[]
  TripStops  TripStops @relation(fields: [tripStopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  City       City      @relation(fields: [idDestiny], references: [id])
}

model TripStops {
  id                 String               @id @default(uuid())
  cityid             String
  City               City                 @relation(fields: [cityid], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "CityDestiny")
  travelId           String
  Travel             Travel               @relation(fields: [travelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tripStopOrder      Int
  created_at         DateTime             @default(now())
  update_at          DateTime             @default(now()) @updatedAt
  PricesBetweenStops PricesBetweenStops[]
}

model Vehicle {
  id                String   @id @default(uuid())
  amount_of_accents Int
  description       String
  plate             String
  with_air          Boolean
  Travel            Travel[]
  cor               String
  created_at        DateTime @default(now())
  update_at         DateTime @default(now()) @updatedAt
  Owner             User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId           String
}

model Travel {
  id            String      @id @default(uuid())
  Vechicle      Vehicle     @relation(fields: [idVehicle], references: [id])
  idVehicle     String
  Route         Route       @relation(fields: [routeId], references: [id])
  routeId       String
  Payment       Payment[]
  Driver        Driver?     @relation(fields: [driverId], references: [idUser])
  driverId      String?
  departureDate DateTime
  arrivalDate   DateTime
  created_at    DateTime    @default(now())
  update_at     DateTime    @default(now()) @updatedAt
  TripStops     TripStops[]
  Tickets       Ticket[]
}

model Payment {
  id                   String              @id @unique
  Travel               Travel              @relation(fields: [travelId], references: [id])
  status               StatusPayment
  Ticket               Ticket[]
  travelId             String
  created_at           DateTime            @default(now())
  update_at            DateTime            @default(now()) @updatedAt
  PricesBetweenStops   PricesBetweenStops? @relation(fields: [pricesBetweenStopsId], references: [id])
  pricesBetweenStopsId String?
}

model Ticket {
  id                   String             @id @default(uuid())
  amount               Float
  Customer             Custumer           @relation(fields: [custumerId], references: [id])
  status               StatusTicket
  Payment              Payment?           @relation(fields: [paymentId], references: [id])
  paymentId            String?
  created_at           DateTime           @default(now())
  update_at            DateTime           @default(now()) @updatedAt
  custumerId           String
  Travel               Travel?            @relation(fields: [travelId], references: [id])
  travelId             String?
  PricesBetweenStops   PricesBetweenStops @relation(fields: [pricesBetweenStopsId], references: [id])
  pricesBetweenStopsId String
}

model Custumer {
  id         String   @id @default(uuid())
  cpf        String
  name       String
  email      String
  password   String
  phone      String
  phone2     String
  Ticket     Ticket[]
  created_at DateTime @default(now())
  update_at  DateTime @default(now()) @updatedAt
}
